#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Sep 10 15:54:41 2017

@author: tanishgirotra
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import RandomizedSearchCV
from scipy.stats import randint

train=pd.read_csv('train.csv')
test=pd.read_csv('test.csv')


# Convert the male and female groups to integer form
train["Sex"][train["Sex"] == "male"] = 0
train["Sex"][train["Sex"] == "female"] = 1

# Impute the Embarked variable
train["Embarked"] = train["Embarked"].fillna("C")

# Convert the Embarked classes to integer form
train["Embarked"][train["Embarked"] == "S"] = 0
train["Embarked"][train["Embarked"] == "C"] = 1
train["Embarked"][train["Embarked"] == "Q"] = 2
train['Age']=train['Age'].fillna(train['Age'].median())

train["pclass_3"]=0
train["pclass_2"]=0
train["pclass_1"]=0

train["pclass_3"][train["Pclass"] == 3] = 1
train["pclass_3"][train["Pclass"] == 2] = 0
train["pclass_3"][train["Pclass"] == 1] = 0

train["pclass_2"][train["Pclass"] == 3] = 0
train["pclass_2"][train["Pclass"] == 2] = 1
train["pclass_2"][train["Pclass"] == 1] = 0

train["pclass_1"][train["Pclass"] == 3] = 0
train["pclass_1"][train["Pclass"] == 2] = 0
train["pclass_1"][train["Pclass"] == 1] = 1



def get_titles():

    global train
    
    # we extract the title from each name
    train['Title'] = train['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())
    
    # a map of more aggregated titles
    Title_Dictionary = {
                        "Capt":       "Officer",
                        "Col":        "Officer",
                        "Major":      "Officer",
                        "Jonkheer":   "Royalty",
                        "Don":        "Royalty",
                        "Sir" :       "Royalty",
                        "Dr":         "Officer",
                        "Rev":        "Officer",
                        "the Countess":"Royalty",
                        "Dona":       "Royalty",
                        "Mme":        "Mrs",
                        "Mlle":       "Miss",
                        "Ms":         "Mrs",
                        "Mr" :        "Mr",
                        "Mrs" :       "Mrs",
                        "Miss" :      "Miss",
                        "Master" :    "Master",
                        "Lady" :      "Royalty"

                        }
    
    # we map each title
    train['Title'] = train.Title.map(Title_Dictionary)
    
get_titles()

def process_names():
    
    global train
    # we clean the Name variable
    train.drop('Name',axis=1,inplace=True)
    
    # encoding in dummy variable
    titles_dummies = pd.get_dummies(train['Title'],prefix='Title')
    train = pd.concat([train,titles_dummies],axis=1)
    
    # removing the title variable
    train.drop('Title',axis=1,inplace=True)
    
process_names()



feature= train[[ "pclass_3","pclass_2","pclass_1","Age", "Sex", "Fare", "SibSp", "Parch", "Embarked","Title_Master","Title_Miss","Title_Officer","Title_Mr"]].values
target=train.Survived.values
forest = RandomForestClassifier(oob_score=True,n_estimators=1000,min_samples_leaf=1,max_features=5,max_depth=3,criterion='entropy')

forest.fit(feature,target)
print(forest.score(feature,target))
test['Survived'] = 0
test['Age']=test['Age'].fillna(test['Age'].median())
test['Fare']=test['Fare'].fillna(test['Fare'].median())

test["Sex"][test["Sex"] == "male"] = 0
test["Sex"][test["Sex"] == "female"] = 1

# Convert the Embarked classes to integer form
test["Embarked"][test["Embarked"] == "S"] = 0
test["Embarked"][test["Embarked"] == "C"] = 1
test["Embarked"][test["Embarked"] == "Q"] = 2

test["pclass_3"]=0
test["pclass_2"]=0
test["pclass_1"]=0

test["pclass_3"][test["Pclass"] == 3] = 1
test["pclass_3"][test["Pclass"] == 2] = 0
test["pclass_3"][test["Pclass"] == 1] = 0

test["pclass_2"][test["Pclass"] == 3] = 0
test["pclass_2"][test["Pclass"] == 2] = 1
test["pclass_2"][test["Pclass"] == 1] = 0

test["pclass_1"][test["Pclass"] == 3] = 0
test["pclass_1"][test["Pclass"] == 2] = 0
test["pclass_1"][test["Pclass"] == 1] = 1

def get_titles():

    global test
    
    # we extract the title from each name
    test['Title'] = test['Name'].map(lambda name:name.split(',')[1].split('.')[0].strip())
    
    # a map of more aggregated titles
    Title_Dictionary = {
                        "Capt":       "Officer",
                        "Col":        "Officer",
                        "Major":      "Officer",
                        "Jonkheer":   "Royalty",
                        "Don":        "Royalty",
                        "Sir" :       "Royalty",
                        "Dr":         "Officer",
                        "Rev":        "Officer",
                        "the Countess":"Royalty",
                        "Dona":       "Royalty",
                        "Mme":        "Mrs",
                        "Mlle":       "Miss",
                        "Ms":         "Mrs",
                        "Mr" :        "Mr",
                        "Mrs" :       "Mrs",
                        "Miss" :      "Miss",
                        "Master" :    "Master",
                        "Lady" :      "Royalty"

                        }
    
    # we map each title
    test['Title'] = test.Title.map(Title_Dictionary)
    

get_titles()

def process_names():
    
    global test
    # we clean the Name variable
    test.drop('Name',axis=1,inplace=True)
    
    # encoding in dummy variable
    titles_dummies = pd.get_dummies(test['Title'],prefix='Title')
    test = pd.concat([test,titles_dummies],axis=1)
    
    # removing the title variable
    test.drop('Title',axis=1,inplace=True)
    
process_names()

test_feature=test[["pclass_3","pclass_2","pclass_1", "Age", "Sex", "Fare", "SibSp", "Parch", "Embarked","Title_Master","Title_Miss","Title_Officer","Title_Mr"]].values

pred = forest.predict(test_feature)

PassengerId =np.array(test["PassengerId"]).astype(int)
my_solution = pd.DataFrame(pred, PassengerId, columns = ["Survived"])


# Check that your data frame has 418 entries
print(my_solution.shape)

my_solution.to_csv("final.csv",index_label=["PassengerId"])

